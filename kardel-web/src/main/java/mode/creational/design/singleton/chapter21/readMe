p.244

    单例模式：保证一个类仅仅有一个实例，并提供一个访问它的全局点。

    Singleton：线程不安全

    MultiThreadSingletonA：线程安全，但由于每次加锁都要加锁，性能低下。

    MultiThreadSingletonB：线程安全，双重加锁，这样线程不用每次都加锁，里面之所以再做一层为null判断，是因为假如两个

线程均进入第一个if，由于synchronized机制，只有一个线程进入，另一个等候，如果没有第二层null判断，则第一个线程创建了实

例后，第二个线程依然可以创建线程，达不到目的。

    以上生成单例的方式均需要第一次引用，我们称之为【懒汉式单例类】


    MultiThreadSingletonC：同样可以以全局访问和线程安全性两个问题，由于是在类被加载时就将自己实例化，会提前占用

系统资源，所以我们将其称之为 【饿汉式单例类】

    究竟使用以上 【饿汉式单例类】 还是【懒汉式单例类】，具体场景具体分析。

    单例模式的好处：节省内存，因为它限制了实例的个数，有利于垃圾回收。


