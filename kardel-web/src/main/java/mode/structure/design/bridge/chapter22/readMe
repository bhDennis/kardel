
p.250

   【桥接模式】

        将抽象与实现相隔离，使它们可以独立的变化。

    理解该模式

        可参看例子，如手机既可以按照软件分类，也可以按照品牌分类，这里的将抽象与实现相隔离，其实是指

实现系统可能有多角度分类，每种分类都有可能变化，那么就将这种多角度分离出来让他们单独变化，从而减少耦合。


    合成/聚合复用原则

        尽量使用合成/聚合，尽量不要使用类继承。

        合成是一种"强"的拥有关系，聚合是一种"弱"的拥有关系，但不是必须。

        举例：大雁有两只翅膀，则大雁和翅膀是 【合成关系】

             大雁是群居动物，一个雁群可以有多只大雁，雁群和大雁是 【聚合关系】

    父类和子类

        二者的继承关系在编译时就定义好了，因此无法在运行时改变从父类继承的实现。

        子类的实现与父类关系比较紧密，以至于父类中的任何变化都会影响到子类。

        当我们要复用子类时，如果继承下来的实现不适合解决新问题，则父类必须重写或者被其他更适合的类

替换掉。这种依赖关系限制了灵活性并最终限制了复用性。


    如果理解不了，请参考 p.256结构图

    针对 AbstractMobileBrandTest 类，我们发现它符合【开放-封闭原则】，新增 品牌，或者新增 软件（如拍照），只需扩展即可，原

来的类可以不用改变。

    优先使用 合成/聚合原则，因为继承是一种强耦合的结构，父类变，则子类也必须变。

    使用继承的场合一定是 is-a关系。




