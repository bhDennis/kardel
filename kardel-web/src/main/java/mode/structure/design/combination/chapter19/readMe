p.219

   【组合模式】
        将对象组合成树形结构以表示 【部分-整体】的层次结构。
        组合模式使得用户对单个对象和组合对象的使用具有一致性。
        为了表示那些层次结构，同时部分和整体也可能是一样的结构，常见的如文件夹或者树。

    适用场景
        需求中体现 部分与整体层次的结构时，以及你希望用户可以忽略组合对象与单个对象的不同，统一地使
用组合结构中的所有对象时，就应该考虑使用组合模式了。

    实际中的案例
        如编写控件，两个文本框外加一个按钮框，构成自定义的登录框控件。这是典型组合模式的应用。

    代码示例分析
        优点如下：
            1.  通过组合模式，我们定义了包含人力资源部、财务部这些基本对象和分公司等组合对象的类层次结构。
        基本对象可以被组合成更复杂的组合对象，而这个组合对象又可以被组合。
              2.  用户不用关心到底是处理一个叶节点还是处理一个组合组件，也不用再为定义组合而写一些选择判断语句。

  需求目的：
      希望总部的财务管理功能也能复用到子公司。

    为什么组合模式？
        如果使用平行结构，总公司和分公司或者办事处共用一套代码管理财务，则具体实现中要根据ID的不同来区分。
        这里的总部、分部和办事处是成树状结构的，即有组织结构的，不可以简单的平行管理。

   Company：为组合中的对象声明接口，用于访问和管理Company的子部件。
   LeafCompany：表示叶子节点，之所以实现add和remove方法，是为了消除叶节点和枝节点在抽象层次的区别。
   CompositeCompany：定义枝节点行为，用来存储子部件

  其他：
        Company中声明了add和remove方法，这样的好处是：叶节点和枝节点对于外界没有区别，具备完全一致的行为接口。
    缺点是叶子节点LeafCompany本身不具备add和remove功能，实现它是没有意义的。假设Company中不声明add和remove方法，
    只在CompositeCompany中实现，但这样做不够透明，会导致树叶和树枝类不具有相同的接口，客户端的调用需要做出相应的判断，
    带来了不便。



